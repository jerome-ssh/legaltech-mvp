import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs';
import { createClient } from '@supabase/supabase-js';
import { AppError, ErrorCodes, createResponse } from '@/lib/error-handling';
import { MAX_RETRIES, RETRY_DELAY } from '@/lib/constants';

// Initialize Supabase client
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

export async function GET() {
  try {
    const { userId } = auth();
    if (!userId) {
      throw new AppError(
        'Unauthorized',
        ErrorCodes.AUTHENTICATION.UNAUTHORIZED,
        401
      );
    }

    // Retry logic for fetching user data
    let clerkUser = null;
    let retryCount = 0;
    let lastError = null;

    while (retryCount < MAX_RETRIES) {
      try {
        const response = await fetch(`https://api.clerk.dev/v1/users/${userId}`, {
          headers: {
            'Authorization': `Bearer ${process.env.CLERK_SECRET_KEY}`,
            'Content-Type': 'application/json'
          }
        });

        if (!response.ok) {
          throw new Error(`Failed to fetch user data: ${response.statusText}`);
        }

        clerkUser = await response.json();
        break;
      } catch (error) {
        lastError = error;
        retryCount++;
        if (retryCount < MAX_RETRIES) {
          await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
        }
      }
    }

    if (!clerkUser) {
      throw new AppError(
        `Failed to fetch user data after ${MAX_RETRIES} attempts: ${lastError?.message}`,
        ErrorCodes.EXTERNAL_SERVICE.CLERK_ERROR,
        500
      );
    }

    // Check if profile exists
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('user_id', userId)
      .single();

    if (profileError && profileError.code !== 'PGRST116') {
      console.error('API route: Error checking profile:', profileError);
      throw new AppError(
        `Failed to check profile: ${profileError.message}`,
        ErrorCodes.DATABASE.CONNECTION_ERROR,
        500
      );
    }

    if (profile) {
      return createResponse({
        exists: true,
        onboarding_completed: profile.onboarding_completed || false,
        profile
      });
    }

    // If profile doesn't exist, create it using the stored procedure
    const { data: newProfile, error: createError } = await supabase
      .rpc('update_profile_with_related', {
        p_user_id: userId,
        p_email: clerkUser.emailAddresses[0]?.emailAddress || null,
        p_phone_number: clerkUser.phoneNumbers[0]?.phoneNumber || null,
        p_first_name: clerkUser.firstName || null,
        p_last_name: clerkUser.lastName || null,
        p_firm_name: null,
        p_specialization: null,
        p_years_of_practice: null,
        p_avatar_url: null,
        p_address: null,
        p_home_address: null,
        p_gender: null,
        p_role: 'attorney',
        p_onboarding_completed: false,
        p_professional_ids: []
      });

    if (createError) {
      console.error('API route: Error creating profile:', createError);
      throw new AppError(
        `Failed to create profile: ${createError.message}`,
        ErrorCodes.DATABASE.CONNECTION_ERROR,
        500
      );
    }

    if (!newProfile) {
      console.error('API route: No profile data returned from creation');
      throw new AppError(
        "Failed to create profile - no data returned",
        ErrorCodes.DATABASE.CONNECTION_ERROR,
        500
      );
    }

    // Ensure newProfile is a valid object before returning
    const profileData = typeof newProfile === 'string' ? JSON.parse(newProfile) : newProfile;
    
    return createResponse({
      exists: true,
      onboarding_completed: profileData.onboarding_completed || false,
      profile: profileData
    });

  } catch (error) {
    console.error('API route: Error in profile check:', error);
    
    if (error instanceof AppError) {
      return createResponse(
        { error: error.message },
        error.statusCode
      );
    }

    return createResponse(
      { error: 'Internal server error' },
      500
    );
  }
} 