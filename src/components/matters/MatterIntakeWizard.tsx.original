'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useToast } from '@/components/ui/use-toast';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Progress } from '@/components/ui/progress';
import { ArrowLeft, ArrowRight, Check, ChevronRight, Calendar, AlertCircle } from 'lucide-react';
import { useForm, Controller, SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import PhoneInput from 'react-phone-input-2';
import 'react-phone-input-2/lib/style.css';

interface MatterIntakeWizardProps {
  onComplete: () => void;
}

// Validation schemas
const clientSchema = z.object({
  title: z.string().min(1, { message: "Title is required" }),
  first_name: z.string().min(1, { message: "First name is required" }),
  last_name: z.string().min(1, { message: "Last name is required" }),
  email: z.string().email({ message: "Valid email is required" }),
  phone: z.string().min(6, { message: "Valid phone number is required" }),
  address: z.string().optional(),
  preferred_language: z.string().min(1, { message: "Preferred language is required" }),
  client_type: z.enum(["Individual", "Business", "Government"], { 
    errorMap: () => ({ message: "Client type is required" }) 
  }),
  date_of_birth: z.date().optional().nullable(),
  initial_consultation_date: z.date().optional().nullable()
});

const matterSchema = z.object({
  matter_type: z.string().min(1, { message: "Matter type is required" }),
  sub_type: z.string().min(1, { message: "Sub-type is required" }),
  description: z.string().min(10, { message: "Please provide a detailed description (min 10 characters)" }),
  jurisdiction: z.string().min(1, { message: "Jurisdiction is required" }),
  estimated_value: z.string().optional(),
  deadline: z.date().optional().nullable(),
  conflict_check_completed: z.boolean()
});

const billingSchema = z.object({
  billing_method: z.enum(["Hourly", "Flat Fee", "Contingency", "Retainer"], { 
    errorMap: () => ({ message: "Billing method is required" }) 
  }),
  hourly_rate: z.string().optional(),
  flat_fee_amount: z.string().optional(),
  contingency_percentage: z.string().optional(),
  retainer_amount: z.string().optional(),
  currency: z.string().min(1, { message: "Currency is required" }),
  automated_time_capture: z.boolean(),
  blockchain_invoicing: z.boolean(),
  send_invoice_on_approval: z.boolean(),
  billing_start_date: z.date().optional().nullable()
});

// Define form value types directly from the schemas
type ClientFormValues = z.infer<typeof clientSchema>;
type MatterFormValues = {
  matter_type: string;
  sub_type: string;
  description: string;
  jurisdiction: string;
  estimated_value?: string;
  deadline?: Date | null;
  conflict_check_completed: boolean;
};
type BillingFormValues = {
  billing_method: 'Hourly' | 'Flat Fee' | 'Contingency' | 'Retainer';
  hourly_rate?: string;
  flat_fee_amount?: string;
  contingency_percentage?: string;
  retainer_amount?: string;
  currency: string;
  automated_time_capture: boolean;
  blockchain_invoicing: boolean;
  send_invoice_on_approval: boolean;
  billing_start_date?: Date | null;
};

interface ClientDetails {
  title: string;
  first_name: string;
  last_name: string;
  email: string;
  phone: string;
  address?: string;
  preferred_language: string;
  client_type: 'Individual' | 'Business' | 'Government';
  date_of_birth?: Date | null;
  initial_consultation_date?: Date | null;
}

interface MatterDetails {
  matter_type: string;
  sub_type: string;
  description: string;
  jurisdiction: string;
  estimated_value?: string;
  deadline?: Date | null;
  conflict_check_completed: boolean;
}

interface BillingDetails {
  billing_method: 'Hourly' | 'Flat Fee' | 'Contingency' | 'Retainer';
  hourly_rate?: string;
  flat_fee_amount?: string;
  contingency_percentage?: string;
  retainer_amount?: string;
  currency: string;
  automated_time_capture: boolean;
  blockchain_invoicing: boolean;
  send_invoice_on_approval: boolean;
  billing_start_date?: Date | null;
}

export function MatterIntakeWizard({ onComplete }: MatterIntakeWizardProps) {
  const router = useRouter();
  const { toast } = useToast();
  const [currentStep, setCurrentStep] = useState(1);
  const [progress, setProgress] = useState(25);
  const [loading, setLoading] = useState(false);
  const [sendEForm, setSendEForm] = useState(false);

  // Form state
  // Load saved client details from localStorage if available
  const [clientDetails, setClientDetails] = useState<ClientDetails>(() => {
    if (typeof window !== 'undefined') {
      const savedData = localStorage.getItem('matter_intake_client_details');
      return savedData ? JSON.parse(savedData) : {
        title: 'Mr',
        first_name: '',
        last_name: '',
        email: '',
        phone: '',
        preferred_language: 'English',
        client_type: 'Individual',
        date_of_birth: null,
        initial_consultation_date: null
      };
    }
    return {
      title: 'Mr',
      first_name: '',
      last_name: '',
      email: '',
      phone: '',
      preferred_language: 'English',
      client_type: 'Individual',
      date_of_birth: null,
      initial_consultation_date: null
    };
  });

  // Load saved matter details from localStorage if available
  const [matterDetails, setMatterDetails] = useState<MatterDetails>(() => {
    if (typeof window !== 'undefined') {
      const savedData = localStorage.getItem('matter_intake_matter_details');
      return savedData ? JSON.parse(savedData) : {
        matter_type: '',
        sub_type: '',
        description: '',
        jurisdiction: '',
        estimated_value: '',
        deadline: null,
        conflict_check_completed: false
      };
    }
    return {
      matter_type: '',
      sub_type: '',
      description: '',
      jurisdiction: '',
      estimated_value: '',
      deadline: null,
      conflict_check_completed: false
    };
  });

  // Load saved billing details from localStorage if available
  const [billingDetails, setBillingDetails] = useState<BillingDetails>(() => {
    if (typeof window !== 'undefined') {
      const savedData = localStorage.getItem('matter_intake_billing_details');
      return savedData ? JSON.parse(savedData) : {
        billing_method: 'Hourly',
        hourly_rate: '',
        flat_fee_amount: '',
        contingency_percentage: '',
        retainer_amount: '',
        currency: 'USD',
        automated_time_capture: true,
        blockchain_invoicing: false,
        send_invoice_on_approval: false,
        billing_start_date: null
      };
    }
    return {
      billing_method: 'Hourly',
      hourly_rate: '',
      flat_fee_amount: '',
      contingency_percentage: '',
      retainer_amount: '',
      currency: 'USD',
      automated_time_capture: true,
      blockchain_invoicing: false,
      send_invoice_on_approval: false,
      billing_start_date: null
    };
  });

  // Save client details to localStorage whenever they change
  useEffect(() => {
    if (typeof window !== 'undefined') {
      localStorage.setItem('matter_intake_client_details', JSON.stringify(clientDetails));
    }
  }, [clientDetails]);

  // Save matter details to localStorage whenever they change
  useEffect(() => {
    if (typeof window !== 'undefined') {
      localStorage.setItem('matter_intake_matter_details', JSON.stringify(matterDetails));
    }
  }, [matterDetails]);

  // Save billing details to localStorage whenever they change
  useEffect(() => {
    if (typeof window !== 'undefined') {
      localStorage.setItem('matter_intake_billing_details', JSON.stringify(billingDetails));
    }
  }, [billingDetails]);

  const handleNext = () => {
    if (currentStep < 4) {
      setCurrentStep(currentStep + 1);
      setProgress(progress + 25);
    }
  };

  // Form setup for client details step
  const clientForm = useForm<ClientFormValues>({
    resolver: zodResolver(clientSchema),
    defaultValues: {
      title: clientDetails.title,
      first_name: clientDetails.first_name,
      last_name: clientDetails.last_name,
      email: clientDetails.email,
      phone: clientDetails.phone,
      address: clientDetails.address || '',
      preferred_language: clientDetails.preferred_language,
      client_type: clientDetails.client_type,
      date_of_birth: clientDetails.date_of_birth,
      initial_consultation_date: clientDetails.initial_consultation_date
    }
  });
  
  // Form setup for matter details step
  const matterForm = useForm<MatterFormValues>({
    resolver: zodResolver(matterSchema),
    defaultValues: {
      matter_type: matterDetails.matter_type,
      sub_type: matterDetails.sub_type,
      description: matterDetails.description,
      jurisdiction: matterDetails.jurisdiction,
      estimated_value: matterDetails.estimated_value,
      deadline: matterDetails.deadline,
      conflict_check_completed: matterDetails.conflict_check_completed || false
    }
  });
  
  // Form setup for billing details step
  const billingForm = useForm<BillingFormValues>({
    resolver: zodResolver(billingSchema),
    defaultValues: {
      billing_method: billingDetails.billing_method,
      hourly_rate: billingDetails.hourly_rate,
      flat_fee_amount: billingDetails.flat_fee_amount,
      contingency_percentage: billingDetails.contingency_percentage,
      retainer_amount: billingDetails.retainer_amount,
      currency: billingDetails.currency,
      automated_time_capture: billingDetails.automated_time_capture || true,
      blockchain_invoicing: billingDetails.blockchain_invoicing || false,
      send_invoice_on_approval: billingDetails.send_invoice_on_approval || false,
      billing_start_date: billingDetails.billing_start_date
    }
  });

  // Extract control and form state for each form
  const { control: clientControl, handleSubmit: handleClientSubmit, formState: { errors: clientErrors } } = clientForm;
  const { control: matterControl, handleSubmit: handleMatterSubmit, formState: { errors: matterErrors } } = matterForm;
  const { control: billingControl, handleSubmit: handleBillingSubmit, formState: { errors: billingErrors } } = billingForm;

  // Form submission handlers
  const onClientSubmit = (data: ClientFormValues) => {
    setClientDetails({
      ...clientDetails,
      ...data
    });
    localStorage.setItem('matter_intake_client_details', JSON.stringify(data));
    setCurrentStep(2);
    setProgress(50);
  };

  const onMatterSubmit = (data: MatterFormValues) => {
    setMatterDetails({
      ...matterDetails,
      ...data
    });
    localStorage.setItem('matter_intake_matter_details', JSON.stringify(data));
    setCurrentStep(3);
    setProgress(75);
  };

  const onBillingSubmit = (data: BillingFormValues) => {
    setBillingDetails({
      ...billingDetails,
      ...data
    });
    localStorage.setItem('matter_intake_billing_details', JSON.stringify(data));
    setCurrentStep(4);
    setProgress(100);
  };
  
  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
      setProgress((currentStep - 1) * 25);
    }
  };

  const handleSubmit = async () => {
    try {
      setLoading(true);

      // Create client first
      const clientResponse = await fetch('/api/clients', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(clientDetails)
      });

      if (!clientResponse.ok) throw new Error('Failed to create client');
      const { id: clientId } = await clientResponse.json();

      // Create matter with client ID
      const matterResponse = await fetch('/api/matters', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...matterDetails,
          client_id: clientId
        })
      });

      if (!matterResponse.ok) throw new Error('Failed to create matter');
      const { id: matterId } = await matterResponse.json();

      // Set up billing
      const billingResponse = await fetch(`/api/matters/${matterId}/billing`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(billingDetails)
      });

      if (!billingResponse.ok) throw new Error('Failed to set up billing');

      // If e-form is enabled, create and send intake form
      if (sendEForm) {
        const intakeResponse = await fetch(`/api/matters/${matterId}/intake`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            client_id: clientId,
            expiration_days: 7
          })
        });

        if (!intakeResponse.ok) throw new Error('Failed to create intake form');
      }

      // Clear stored form data from localStorage
      localStorage.removeItem('matter_intake_client_details');
      localStorage.removeItem('matter_intake_matter_details');
      localStorage.removeItem('matter_intake_billing_details');

      toast({
        title: 'Success',
        description: 'Matter created successfully',
      });

      onComplete();
      router.push('/matters');
    } catch (error) {
      console.error('Error creating matter:', error);
      toast({
        title: 'Error',
        description: 'Failed to create matter. Please try again.',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
    }
  };
                    field.onChange(e);
                    setClientDetails(prev => ({ ...prev, last_name: e.target.value }));
                  }}
                  placeholder="Smith"
                  className={clientErrors.last_name ? 'border-red-500' : ''}
                />
                {clientErrors.last_name && <p className="text-red-500 text-xs mt-1 flex items-center"><AlertCircle className="h-3 w-3 mr-1" />{clientErrors.last_name.message}</p>}
              </div>
            )}
          />
        </div>
      </div>

      <div>
        <Label htmlFor="email" className="mb-1">Email</Label>
        <Controller
          name="email"
          control={clientControl}
          render={({ field }) => (
            <div>
              <Input
                id="email"
                type="email"
                value={field.value}
                onChange={(e) => {
                  field.onChange(e);
                  setClientDetails(prev => ({ ...prev, email: e.target.value }));
                }}
                placeholder="john.smith@email.com"
                className={clientErrors.email ? 'border-red-500' : ''}
              />
              {clientErrors.email && <p className="text-red-500 text-xs mt-1 flex items-center"><AlertCircle className="h-3 w-3 mr-1" />{clientErrors.email.message}</p>}
            </div>
          )}
        />
      </div>

      <div>
        <Label htmlFor="phone" className="mb-1">Phone Number</Label>
        <Controller
          name="phone"
          control={clientControl}
          render={({ field }) => (
            <div>
              <PhoneInput
                country={'us'}
                value={field.value}
                onChange={(phone) => {
                  field.onChange(phone);
                  setClientDetails(prev => ({ ...prev, phone }));
                }}
                inputClass={clientErrors.phone ? 'border-red-500' : ''}
                containerClass="w-full"
                inputStyle={{ width: '100%' }}
              />
              {clientErrors.phone && <p className="text-red-500 text-xs mt-1 flex items-center"><AlertCircle className="h-3 w-3 mr-1" />{clientErrors.phone.message}</p>}
            </div>
          )}
        />
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <Label htmlFor="date_of_birth" className="mb-1">Date of Birth</Label>
          <Controller
            name="date_of_birth"
            control={clientControl}
            render={({ field }) => (
              <div className="relative">
                <DatePicker
                  selected={field.value}
                  onChange={(date) => {
                    field.onChange(date);
                    setClientDetails(prev => ({ ...prev, date_of_birth: date }));
                  }}
                  placeholderText="Select date"
                  className={`w-full p-2 border rounded-md ${clientErrors.date_of_birth ? 'border-red-500' : 'border-input'}`}
                  dateFormat="MM/dd/yyyy"
                />
                <Calendar className="absolute right-3 top-2.5 h-4 w-4 text-gray-400 pointer-events-none" />
              </div>
            )}
          />
        </div>

        <div>
          <Label htmlFor="preferred_language" className="mb-1">Preferred Language</Label>
          <Controller
            name="preferred_language"
            control={clientControl}
            render={({ field }) => (
              <div>
                <Select
                  value={field.value}
                  onValueChange={(value) => {
                    field.onChange(value);
                    setClientDetails(prev => ({ ...prev, preferred_language: value }));
                  }}
                >
                  <SelectTrigger id="preferred_language" className={`w-full ${clientErrors.preferred_language ? 'border-red-500' : ''}`}>
                    <SelectValue placeholder="Select language" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="English">English</SelectItem>
                    <SelectItem value="Spanish">Spanish</SelectItem>
                    <SelectItem value="French">French</SelectItem>
                    <SelectItem value="German">German</SelectItem>
                    <SelectItem value="Chinese">Chinese</SelectItem>
                  </SelectContent>
                </Select>
                {clientErrors.preferred_language && <p className="text-red-500 text-xs mt-1 flex items-center"><AlertCircle className="h-3 w-3 mr-1" />{clientErrors.preferred_language.message}</p>}
              </div>
            )}
          />
        </div>
      </div>

      <div>
        <Label htmlFor="initial_consultation_date" className="mb-1">Initial Consultation Date</Label>
        <Controller
          name="initial_consultation_date"
          control={clientControl}
          render={({ field }) => (
            <div className="relative">
              <DatePicker
                selected={field.value}
                onChange={(date) => {
                  field.onChange(date);
                  setClientDetails(prev => ({ ...prev, initial_consultation_date: date }));
                }}
                placeholderText="Select date"
                className="w-full p-2 border rounded-md border-input"
                minDate={new Date()}
                showTimeSelect
                timeFormat="HH:mm"
                timeIntervals={15}
                timeCaption="time"
                dateFormat="MMMM d, yyyy h:mm aa"
              />
              <Calendar className="absolute right-3 top-2.5 h-4 w-4 text-gray-400 pointer-events-none" />
            </div>
          )}
        />
      </div>

      <div>
        <Label htmlFor="address" className="mb-1">Address (Optional, but required for court filings)</Label>
        <Controller
          name="address"
          control={clientControl}
          render={({ field }) => (
            <div>
              <Textarea
                id="address"
                value={field.value || ''}
                onChange={(e) => {
                  field.onChange(e);
                  setClientDetails(prev => ({ ...prev, address: e.target.value }));
                }}
                placeholder="123 Main St, City, State, ZIP"
                className={clientErrors.address ? 'border-red-500' : ''}
              />
              {clientErrors.address && <p className="text-red-500 text-xs mt-1 flex items-center"><AlertCircle className="h-3 w-3 mr-1" />{clientErrors.address.message}</p>}
            </div>
          )}
        />
      </div>

      <div className="mt-4">
        <div className="flex items-center space-x-3">
          <Switch
            id="send_eform"
            checked={sendEForm}
            onCheckedChange={setSendEForm}
          />
          <Label htmlFor="send_eform" className="cursor-pointer text-sm">Send intake form to client's email</Label>
        </div>
      </div>
    </div>
    <div className="flex justify-end mt-6">
      <Button type="submit" disabled={loading}>
        {loading ? (
          <>
            <span className="mr-2">Saving...</span>
            <span className="animate-spin">⟳</span>
          </>
        ) : (
          <>
            Next
            <ArrowRight className="ml-2 h-4 w-4" />
          </>
        )}
      </Button>
    </div>
  </form>
        );

      case 2:
        return (
          <div className="space-y-6">
            <div>
              <Label htmlFor="matter_type">Matter Type</Label>
              <Select
                value={matterDetails.matter_type}
                onValueChange={(value) => setMatterDetails({ ...matterDetails, matter_type: value })}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select matter type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Litigation">Litigation</SelectItem>
                  <SelectItem value="Transactional">Transactional</SelectItem>
                  <SelectItem value="Advisory">Advisory</SelectItem>
                  <SelectItem value="ADR">ADR</SelectItem>
                  <SelectItem value="Pro Bono">Pro Bono</SelectItem>
                  <SelectItem value="Other">Other</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="sub_type">Sub-Type</Label>
              <Select
                value={matterDetails.sub_type}
                onValueChange={(value) => setMatterDetails({ ...matterDetails, sub_type: value })}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select sub-type" />
                </SelectTrigger>
                <SelectContent>
                  {matterDetails.matter_type === 'Litigation' && (
                    <>
                      <SelectItem value="Civil">Civil</SelectItem>
                      <SelectItem value="Criminal">Criminal</SelectItem>
                      <SelectItem value="Family">Family</SelectItem>
                      <SelectItem value="Personal Injury">Personal Injury</SelectItem>
                      <SelectItem value="Employment">Employment</SelectItem>
                    </>
                  )}
                  {matterDetails.matter_type === 'Transactional' && (
                    <>
                      <SelectItem value="Corporate">Corporate</SelectItem>
                      <SelectItem value="Real Estate">Real Estate</SelectItem>
                      <SelectItem value="Estate Planning">Estate Planning</SelectItem>
                      <SelectItem value="Intellectual Property">Intellectual Property</SelectItem>
                      <SelectItem value="Contract Drafting">Contract Drafting</SelectItem>
                    </>
                  )}
                  {matterDetails.matter_type === 'Advisory' && (
                    <>
                      <SelectItem value="Tax">Tax</SelectItem>
                      <SelectItem value="Regulatory">Regulatory</SelectItem>
                      <SelectItem value="Financial">Financial</SelectItem>
                    </>
                  )}
                  {matterDetails.matter_type === 'ADR' && (
                    <>
                      <SelectItem value="Mediation">Mediation</SelectItem>
                      <SelectItem value="Arbitration">Arbitration</SelectItem>
                    </>
                  )}
                  {matterDetails.matter_type === 'Pro Bono' && (
                    <>
                      <SelectItem value="Immigration">Immigration</SelectItem>
                      <SelectItem value="Civil Rights">Civil Rights</SelectItem>
                      <SelectItem value="Environmental">Environmental</SelectItem>
                    </>
                  )}
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                value={matterDetails.description}
                onChange={(e) => setMatterDetails({ ...matterDetails, description: e.target.value })}
                placeholder="Describe the matter in detail..."
                className="h-32"
              />
            </div>
            <div>
              <Label htmlFor="jurisdiction">Jurisdiction</Label>
              <Input
                id="jurisdiction"
                value={matterDetails.jurisdiction}
                onChange={(e) => setMatterDetails({ ...matterDetails, jurisdiction: e.target.value })}
                placeholder="e.g., California, UK, India"
              />
            </div>
            <div>
              <Label htmlFor="estimated_value">Estimated Value (Optional)</Label>
              <Input
                id="estimated_value"
                type="number"
                value={matterDetails.estimated_value}
                onChange={(e) => setMatterDetails({ ...matterDetails, estimated_value: e.target.value })}
                placeholder="e.g., 10000"
                />
                <Label htmlFor="blockchain_invoicing">Enable Blockchain-Secured Invoicing</Label>
              </div>
              <div className="flex items-center space-x-2">
                <Switch
                  id="send_invoice_on_approval"
                  checked={billingDetails.send_invoice_on_approval}
                  onCheckedChange={(checked) => setBillingDetails({ ...billingDetails, send_invoice_on_approval: checked })}
                />
                <Label htmlFor="send_invoice_on_approval">Send Invoice on Client Approval</Label>
              </div>
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-6">
            <div className="border rounded-lg p-4 shadow-sm">
              <h3 className="text-lg font-semibold mb-3 text-gray-800">Client Information</h3>
              <div className="grid grid-cols-2 gap-3 text-sm">
                <div className="font-medium text-gray-600">Name:</div>
                <div className="text-gray-900">{`${clientDetails.title} ${clientDetails.first_name} ${clientDetails.last_name}`}</div>
                
                <div className="font-medium text-gray-600">Email:</div>
                <div className="text-gray-900">{clientDetails.email}</div>
                
                <div className="font-medium text-gray-600">Phone:</div>
                <div className="text-gray-900">{clientDetails.phone}</div>
                
                <div className="font-medium text-gray-600">Preferred Language:</div>
                <div className="text-gray-900">{clientDetails.preferred_language}</div>
              </div>
            </div>
            
            <div className="border rounded-lg p-4 shadow-sm">
              <h3 className="text-lg font-semibold mb-3 text-gray-800">Matter Details</h3>
              <div className="grid grid-cols-2 gap-3 text-sm">
                <div className="font-medium text-gray-600">Type:</div>
                <div className="text-gray-900">{matterDetails.matter_type}</div>
                
                <div className="font-medium text-gray-600">Sub-Type:</div>
                <div className="text-gray-900">{matterDetails.sub_type}</div>
                
                <div className="font-medium text-gray-600">Jurisdiction:</div>
                <div className="text-gray-900">{matterDetails.jurisdiction}</div>
                
                <div className="font-medium text-gray-600 col-span-2">Description:</div>
                <div className="text-gray-900 col-span-2">{matterDetails.description}</div>
              </div>
            </div>
            
            <div className="border rounded-lg p-4 shadow-sm">
              <h3 className="text-lg font-semibold mb-3 text-gray-800">Billing Details</h3>
              <div className="grid grid-cols-2 gap-3 text-sm">
                <div className="font-medium text-gray-600">Method:</div>
                <div className="text-gray-900">{billingDetails.billing_method}</div>
                
                {billingDetails.billing_method === 'Hourly' && billingDetails.hourly_rate && (
                  <>
                    <div className="font-medium text-gray-600">Rate:</div>
                    <div className="text-gray-900">{billingDetails.hourly_rate} {billingDetails.currency}</div>
                  </>
                )}
                
                {billingDetails.billing_method === 'Flat Fee' && billingDetails.flat_fee_amount && (
                  <>
                    <div className="font-medium text-gray-600">Fee:</div>
                    <div className="text-gray-900">{billingDetails.flat_fee_amount} {billingDetails.currency}</div>
                  </>
                )}
                
                <div className="font-medium text-gray-600">Features:</div>
                <div className="text-gray-900">
                  {billingDetails.automated_time_capture && 'Automated Time Capture'}
                  {billingDetails.blockchain_invoicing && ', Blockchain Invoicing'}
                  {billingDetails.send_invoice_on_approval && ', Auto-Invoice'}
                </div>
              </div>
            </div>
            
            {sendEForm && (
              <div className="bg-blue-50 border border-blue-100 rounded-lg p-3 mt-2">
                <p className="text-sm text-blue-700 flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                  </svg>
                  Intake form will be sent to {clientDetails.email}
                </p>
              </div>
            )}
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="grid grid-cols-[280px_1fr] overflow-hidden rounded-xl shadow-xl">
      {/* Left sidebar */}
      <div className="bg-gradient-to-b from-blue-600 via-blue-700 to-blue-900 text-white p-6 min-h-[500px] rounded-l-xl flex flex-col justify-between shadow-inner overflow-hidden relative before:absolute before:inset-0 before:bg-gradient-to-tr before:from-transparent before:via-blue-400/10 before:to-yellow-200/20">
        <div>
          <h2 className="text-2xl font-black mb-8 text-white drop-shadow-[0_1px_2px_rgba(0,0,0,0.4)]">LawMate</h2>
          <h3 className="text-xl font-extrabold mb-2 text-white">New Matter Intake</h3>
          
          <div className="mb-8">
            <div className="uppercase text-xs mb-3 font-black tracking-wider text-white">PROGRESS</div>
            <div className="relative w-full bg-blue-800/70 h-4 rounded-full mb-2 shadow-inner">
              <div className="absolute left-0 top-0 h-4 bg-white rounded-full transition-all shadow-sm" style={{ width: `${25 * currentStep}%` }}></div>
            </div>
            <div className="text-sm font-extrabold mt-4 text-white">Step {currentStep} of 4</div>
          </div>
        </div>
        
        <div className="text-xs text-white mt-auto">
          © {new Date().getFullYear()} LawMate
        </div>
      </div>
      
      {/* Right content */}
      <div className="p-6 bg-white rounded-r-xl">
        <Card className="border-0 shadow-lg rounded-xl">
          <CardContent className="p-8">
            <div className="mb-5">
              <h2 className="text-xl font-bold mb-1">
                {currentStep === 1 && 'Client Information'}
                {currentStep === 2 && 'Matter Details'}
                {currentStep === 3 && 'Billing Setup'}
                {currentStep === 4 && 'Review & Submit'}
              </h2>
              <p className="text-gray-500 text-sm">
                {currentStep === 1 && 'Please fill out all required fields to create a new matter.'}
                {currentStep === 2 && 'Provide details about the legal matter.'}
                {currentStep === 3 && 'Set up billing preferences for this matter.'}
                {currentStep === 4 && 'Review all information before submitting.'}
              </p>
            </div>
            
            {renderStep()}
            
            <div className="mt-6 flex justify-between">
              {currentStep > 1 ? (
                <Button
                  variant="outline"
                  onClick={handleBack}
                  className="border-gray-300 text-gray-600 hover:bg-gray-50"
                >
                  Back
                </Button>
              ) : (
                <div></div> // Empty div for spacing
              )}
              
              {currentStep < 4 ? (
                <Button 
                  onClick={handleNext} 
                  className="bg-black hover:bg-gray-800 text-white rounded-md px-4 py-2"
                >
                  Next
                  <ChevronRight className="ml-1 h-4 w-4" />
                </Button>
              ) : (
                <Button 
                  onClick={handleSubmit} 
                  disabled={loading}
                  className="bg-black hover:bg-gray-800 text-white rounded-md px-4 py-2"
                >
                  {loading ? 'Creating...' : 'Submit'}
                  <Check className="ml-2 h-4 w-4" />
                </Button>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
} 